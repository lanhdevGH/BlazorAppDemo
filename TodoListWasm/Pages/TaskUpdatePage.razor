@page "/task-update/{taskId}"
@using TodoList.Lib.DTO
@using TodoList.Lib.Enums
@using TodoListWasm.Services
@using TodoListWasm.Components

@inject ITaskClientService taskService
@inject IUserClientService userService
@inject IToastService toastService
@inject NavigationManager navigate

<h3>TaskUpdatePage : @taskId</h3>

@if (taskUpdate == null)
{
    <Loading></Loading>
}
else
{
    <EditForm Model="@taskUpdate">
        <DataAnnotationsValidator />
        @* <ValidationSummary /> *@
        <div class="row">
            <div class="col">
                <label for="ip-task-name">Name</label>
                <InputText class="form-control" id="ip-task-name" @bind-Value="taskUpdate.Name"></InputText>
                <ValidationMessage For="() => taskUpdate.Name" />
            </div>
            <div>
                <label for="ip-task-descript">Description</label>
                <InputText class="form-control" id="ip-task-descript" @bind-Value="taskUpdate.Description"></InputText>
                <ValidationMessage For="() => taskUpdate.Description" />
            </div>
            @* <div class="col">
                <label for="ip-task-assignee">Assignee</label>
                <InputSelect class="form-control" id="ip-task-assignee" @bind-Value="taskUpdate.AssigneeID">
                    <option value="">Select an User</option>
                    @foreach (var assignee in listUser)
                    {
                        <option value="@assignee.Id">@assignee.UserName</option>
                    }
                </InputSelect>
            </div> *@
            <div class="col">
                <label for="">Priority</label>
                <InputSelect class="form-control" id="ip-task-priority" @bind-Value="taskUpdate.Priority">
                    <option value="">Select Priority</option>
                    @foreach (var item in Enum.GetNames(typeof(Priority)))
                    {
                        <option value="@item">@item</option>
                    }
                </InputSelect>
            </div>
            <div class="col w-100">
                <label for="">Status</label>
                <InputSelect id="ip-task-status" class="form-control" @bind-Value="taskUpdate.Status">
                    <option value="">Select Status</option>
                    @foreach (var item in Enum.GetNames(typeof(Status)))
                    {
                        <option value="@item">@item</option>
                    }
                </InputSelect>
            </div>
            <div class="col">
                <button type="submit" onclick="@OnUpdateTask" class="btn btn-primary">Create new task</button>
            </div>
        </div>
    </EditForm>
}

@code {
    [Parameter] public string? taskId { get; set; }

    public TaskUpdateRequest? taskUpdate { get; set; }
    public List<UserDTO>? listUser { get; set; }

    protected override async Task OnInitializedAsync()
    {
        listUser = new List<UserDTO>();
        var userRepo = await userService.GetAllUser();
        if (userRepo != null)
        {
            listUser.AddRange(userRepo);
        }

        taskUpdate = new TaskUpdateRequest();
        var task = await taskService.GetTask(taskId);
        taskUpdate.Name = task.Name ?? "N/A";
        taskUpdate.Description = task.Description;
        taskUpdate.Priority = task.Priority;
        taskUpdate.Status = task.Status;
    }

    private async void OnUpdateTask()
    {
        var result = await taskService.UpdateTaskByIdAsync(Guid.Parse(taskId), taskUpdate);
        if (result)
        {
            toastService.ShowSuccess("Thêm mới task thành công");
            await Task.Delay(500);
            navigate.NavigateTo("/todo-list");
        }
        else
        {
            toastService.ShowError("Thêm mới thất bại");
        }
    }
}
